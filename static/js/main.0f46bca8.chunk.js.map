{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","state","name","imageUrl","pokemonIndex","typeUrl","types","this","props","monster","url","split","length","axios","get","res","data","setState","map","console","log","type","nextProps","className","alt","src","Component","CardList","monsters","key","id","SearchBox","placeholder","handleChange","onChange","App","e","searchField","target","value","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f46bca8.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './card.styles.css';\n\nexport default class Card extends Component{\n\n    // constructor(props) {\n    //     super(props);\n    \n       // console.log(this.props.monster)\n        state={\n            name:'',\n            imageUrl:'',\n            pokemonIndex:'',\n            typeUrl:'',\n            types:[]\n        };\n        // console.log(this.state.monster)\n    // }\n    // state={\n    //     name:'',\n    //     imageUrl:'',\n    //     pokemonIndex:''\n    // }\n\n\n   async componentDidMount(){\n        \n        const name= this.props.monster.name;\n        const url = this.props.monster.url;\n        \n        const pokemonIndex = url.split('/')[url.split('/').length - 2];\n        \n        const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemonIndex}.png`;\n\n        const typeUrl = `https://pokeapi.co/api/v2/pokemon/${pokemonIndex}/`;\n\n        const res = await axios.get(typeUrl);\n    \n        const types= res.data['types'];\n\n       // this.state.types.map(monster => (console.log(monster.name)));\n\n        this.setState({\n            name,\n            url,\n            pokemonIndex,\n            imageUrl,\n            typeUrl,\n            types\n        });\n        this.state.types.map(monster => (console.log(monster.type.name)));\n      //  console.log('5',this.state.name)\n    }\n    async componentWillReceiveProps(nextProps) {\n        const name= nextProps.monster.name;\n        const url = nextProps.monster.url;\n        \n        const pokemonIndex = url.split('/')[url.split('/').length - 2];\n        \n        const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemonIndex}.png`\n\n        const typeUrl = `https://pokeapi.co/api/v2/pokemon/${pokemonIndex}/`;\n\n        const res = await axios.get(typeUrl);\n    \n        const types= res.data['types'];\n\n        this.setState({\n            name,\n            url,\n            pokemonIndex,\n            imageUrl,\n            typeUrl,\n            types\n        });\n        console.log('5',this.state.types.map(monster =>( monster.type.name)))\n    }\n    // componentWillReceiveProps(nextProps) {\n    //     this.setState({\n    //         name:nextProps.name,\n    //         url:nextProps.url,\n    //         pokemonIndex:nextProps.pokemonIndex,\n    //         imageUrl:nextProps.imageUrl\n    //     });\n    // }\n\n    render() {\n        return(\n            <div className='card-container'>\n               <img alt=\"monster\" src={this.state.imageUrl} />\n                <h1> {this.state.name} </h1> \n                <div>\n                <p>Type:</p>\n                {this.state.types.map(monster => <p>{monster.type.name}</p>)}\n                </div>\n            </div>\n        )\n    }\n}\n\n// export const Card = props => ( //it fets monster from props from Card-list-component\n//     //  {pokemonIndex = props.monster.url}\n//     <div className='card-container'>\n//         <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n//         <h1> {props.monster.name} </h1> \n//         <p> {props.monster.url} </p>\n//     </div>\n// );\n","import React, { Component } from 'react';\n\nimport  Card from '../card/card.component';\n\nimport './card-list.styles.css'\n\nexport default class CardList extends Component{\n\n constructor(props) {\n    super(props);\n\n    //console.log(this.props.monsters)\n    this.state={monsters: this.props.monsters};\n    //console.log('2',this.state.monsters)\n}\n\n\n  render() {\n      return(\n       \n          <div className='card-list'>\n            {this.props.monsters.map(monster =>( //props is giving monsters, iterating over the monsters array\n              <Card key={monster.id} monster={monster} /> //sending monter as props to Card Component\n            ))}\n          </div> \n        \n      )\n  }\n};\n","import React from 'react';\n\nimport './search-box.styles.css';\n\n//functional component, it dosent has state, life cycle methods, it only gets props and renders them\nexport const SearchBox = ({ placeholder, handleChange}) => (\n    <input \n    className='search'\n        type='search' \n        placeholder={placeholder}\n        onChange={handleChange}\n    />   \n    ); ","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport  CardList from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css'; // importing css\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: null,\n      searchField: ''\n    };\n  }\n\n  async componentDidMount() { //componentDidMount is a method in Component which is auto called by react when it renders on dom, when it renders on dom then make an api call \n    const res = await axios.get('https://pokeapi.co/api/v2/pokemon/?limit=151');\n    \n    this.setState({ monsters: res.data['results']});\n  }\n\n\n  handleChange = e => { // when component is compiled then arrow function is binded to the place where this arrow function was defined in the first place and the it is app component. you cannont call dot bind on them, auto get lexical scoping\n    this.setState({ searchField: e.target.value});\n  }\n\n\n  render () { // whenever the setstate is called from search field render() is called and page is rerendered everytime\n    // const { monsters, searchField } = this.state; \n    // console.log('1',this.state.monsters)\n    const { monsters, searchField} = this.state;\n\n    if (monsters == null) {\n      return(\n        <div>Loading Data</div>\n      )\n    }else{\n\n      const filteredMonsters = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase()) //searching the monsters from search field value\n        )\n        console.log(filteredMonsters);\n\n      return (\n        <div className='App'>\n          <h1 className='heading'>PokeMon</h1>\n          <SearchBox\n              placeholder = 'search pokemon'\n              handleChange={this.handleChange} //e is the event which occurs on change o search field value, and we changing the state of the search field to value in it\n          />\n          {monsters ? (\n          \n          < CardList monsters={filteredMonsters}/>\n          \n          ):(\n            <h1>Loading pokemon</h1>\n          )}\n          {/* {this.state.monsters.map(monster => <div> {monster[0].name} </div>)} */}\n        </div>\n        );\n      }\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); // it calls app function from App, and replaces it with document's root\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}